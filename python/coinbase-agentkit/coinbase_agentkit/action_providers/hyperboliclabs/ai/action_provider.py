"""Hyperbolic AI action provider.

This module provides actions for interacting with Hyperbolic AI services.
It includes functionality for text, image and audio generation.
"""

import uuid
from typing import Any

from coinbase_agentkit.network import Network

from ...action_decorator import create_action
from ...action_provider import ActionProvider
from ..utils import get_api_key
from .models import (
    AudioGenerationRequest,
    ChatCompletionRequest,
    ChatMessage,
    ImageGenerationRequest,
)
from .schemas import (
    GenerateAudioSchema,
    GenerateImageSchema,
    GenerateTextSchema,
)
from .service import AIService
from .utils import save_base64_data, save_text


class AIActionProvider(ActionProvider):
    """Action provider for generating text, images and audio via AI."""

    description = "Action provider for generating text, images and audio via AI."

    def __init__(
        self,
        api_key: str | None = None,
    ):
        """Initialize the AI action provider.

        Args:
            api_key: The API key for authentication.

        """
        super().__init__("hyperbolic_ai", [])

        try:
            self.api_key = api_key or get_api_key()
        except ValueError as e:
            raise ValueError(
                f"{e!s} Please provide it directly "
                "or set the HYPERBOLIC_API_KEY environment variable."
            ) from e

        self.ai_service = AIService(api_key=self.api_key)

    @create_action(
        name="generate_text",
        description="""
This tool generates text using specified language model.

Required inputs:
- prompt: Text prompt for generation.
- model: (Optional) Model to use for text generation.
    Default: "meta-llama/Meta-Llama-3-70B-Instruct"

Example response:
    Text generated successfully and saved to:
    /path/to/generated_text_123.txt

    Preview (first 500 chars):
    This is the start of the generated text which provides an answer to your question...

A failure response will return an error message like:
    Error generating text: Invalid model specified
    Error generating text: API request failed

Notes:
- The prompt should be clear and specific
- Response length depends on the prompt and model
""",
        schema=GenerateTextSchema,
    )
    def generate_text(self, args: dict[str, Any]) -> str:
        """Generate text using specified language model.

        Args:
            args (dict[str, Any]): Arguments for text generation.

        Returns:
            str: A formatted string with the file path, preview and any error details.

        """
        try:
            # Validate arguments using schema
            validated_args = GenerateTextSchema(**args)

            # Create chat message
            messages = []
            if validated_args.system_prompt:
                messages.append(ChatMessage(role="system", content=validated_args.system_prompt))
            messages.append(ChatMessage(role="user", content=validated_args.prompt))

            # Create request
            request = ChatCompletionRequest(
                messages=messages,
                model=validated_args.model,
            )

            # Generate text
            response = self.ai_service.generate_text(request)

            # Extract the generated text content
            if response.choices and len(response.choices) > 0:
                generated_text = response.choices[0].message.content

                # Save the text to a file
                filename = f"./tmp/generated_text_{uuid.uuid4()}.txt"
                file_path = save_text(generated_text, filename)

                # Create a preview of the text (first 500 characters)
                preview = (
                    generated_text[:500] + "..." if len(generated_text) > 500 else generated_text
                )

                # Return a formatted response
                output = [
                    "Text generated successfully and saved to:",
                    file_path,
                    "",
                    "Preview (first 500 chars):",
                    preview,
                ]

                return "\n".join(output)

            # If no choices, return an error
            return "Error: No text was generated by the model."
        except Exception as e:
            return f"Error generating text: {e}"

    @create_action(
        name="generate_image",
        description="""
This tool generates images using specified model.

Required inputs:
- prompt: The image prompt to generate from
- model_name: (Optional) The model to use (default: "SDXL1.0-base")
- height: (Optional) Image height in pixels (default: 1024)
- width: (Optional) Image width in pixels (default: 1024)
- steps: (Optional) Number of inference steps (default: 30)
- num_images: (Optional) Number of images to generate (default: 1)
- negative_prompt: (Optional) What to avoid in the image

Example response:
    Image(s) generated successfully and saved to:
    - /path/to/generated_image_123.png
    - /path/to/generated_image_456.png

A failure response will return an error message like:
    Error generating image: Invalid model specified
    Error generating image: API request failed

Notes:
- The prompt should be descriptive and specific
- Images are saved as PNG files
""",
        schema=GenerateImageSchema,
    )
    def generate_image(self, args: dict[str, Any]) -> str:
        """Generate images using specified model.

        Args:
            args (dict[str, Any]): Arguments for image generation.

        Returns:
            str: A formatted string with the file paths or error details.

        """
        try:
            # Validate arguments using schema
            validated_args = GenerateImageSchema(**args)

            # Create request
            request = ImageGenerationRequest(
                prompt=validated_args.prompt,
                model_name=validated_args.model_name,
                height=validated_args.height,
                width=validated_args.width,
                steps=validated_args.steps,
                num_images=validated_args.num_images,
                negative_prompt=validated_args.negative_prompt,
            )

            # Generate image
            response = self.ai_service.generate_image(request)

            # Save each image to a file
            file_paths = []
            for img in response.images:
                filename = f"./tmp/generated_image_{uuid.uuid4()}.png"
                file_path = save_base64_data(img.image, filename)
                file_paths.append(file_path)

            # Return a formatted response
            if not file_paths:
                return "No images were generated."

            output = ["Image(s) generated successfully and saved to:"]
            for path in file_paths:
                output.append(f"- {path}")

            return "\n".join(output)

        except Exception as e:
            return f"Error generating image: {e}"

    @create_action(
        name="generate_audio",
        description="""
This tool generates audio from text using specified language and speaker.

Required inputs:
- text: The text to convert to speech
- language: (Optional) The language code (default: "EN")
- speaker: (Optional) The speaker voice (default: "EN-US")
- speed: (Optional) Speaking speed multiplier (0.1-5.0)

Example response:
    Audio generated successfully and saved to:
    /path/to/generated_audio_123.mp3

A failure response will return an error message like:
    Error generating audio: Invalid language specified
    Error generating audio: API request failed

Notes:
- Authorization key is required
- The text should be in the specified language
- Audio is saved as MP3 file
""",
        schema=GenerateAudioSchema,
    )
    def generate_audio(self, args: dict[str, Any]) -> str:
        """Generate audio from text using specified language and speaker.

        Args:
            args (dict[str, Any]): Arguments for audio generation.

        Returns:
            str: A formatted string with the file path or error details.

        """
        try:
            # Handle string input by converting to a dictionary
            if isinstance(args, str):
                args = {"text": args}

            validated_args = GenerateAudioSchema(**args)

            # Create request
            request = AudioGenerationRequest(
                text=validated_args.text,
                language=validated_args.language,
                speaker=validated_args.speaker,
                speed=validated_args.speed,
            )

            # Generate audio
            response = self.ai_service.generate_audio(request)

            # Save the audio to a file
            audio_data = response.audio
            filename = f"./tmp/generated_audio_{uuid.uuid4()}.mp3"
            file_path = save_base64_data(audio_data, filename)

            # Return a formatted response
            output = ["Audio generated successfully and saved to:", file_path]

            return "\n".join(output)

        except Exception as e:
            return f"Error generating audio: {e}"

    def supports_network(self, network: Network) -> bool:
        """Check if the action provider supports the given network.

        Args:
            network: The network to check support for.

        Returns:
            bool: True if the network is supported, False otherwise.

        """
        # Hyperbolic AI is a cloud service and works with any blockchain
        return True


def hyperbolic_ai_action_provider(
    api_key: str | None = None,
) -> AIActionProvider:
    """Create a new instance of the AIActionProvider.

    Args:
        api_key: Optional API key for authentication. If not provided,
                will attempt to read from HYPERBOLIC_API_KEY environment variable.

    Returns:
        A new AI action provider instance.

    Raises:
        ValueError: If API key is not provided and not found in environment.

    """
    return AIActionProvider(api_key=api_key)
